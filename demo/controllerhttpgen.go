package main

// file generated by
// github.com/mh-cbon/httper
// do not edit

import (
	httper "github.com/mh-cbon/httper/lib"
	"io"
	"net/http"
	"strconv"
)

var xxStrconvAtoi = strconv.Atoi
var xxIoCopy = io.Copy
var xxHTTPOk = http.StatusOK

// ControllerHTTPGen is an httper of *ControllerJSONGen.
// ControllerJSONGen is jsoner of *Controller.
// Controller of some resources.
type ControllerHTTPGen struct {
	embed     *ControllerJSONGen
	cookier   httper.CookieProvider
	dataer    httper.DataerProvider
	sessioner httper.SessionProvider
	finalizer httper.Finalizer
}

// NewControllerHTTPGen constructs an httper of *ControllerJSONGen
func NewControllerHTTPGen(embed *ControllerJSONGen, finalizer httper.Finalizer) *ControllerHTTPGen {
	if finalizer == nil {
		finalizer = &httper.HTTPFinalizer{}
	}
	ret := &ControllerHTTPGen{
		embed:     embed,
		cookier:   &httper.CookieHelperProvider{},
		dataer:    &httper.GorillaHTTPDataProvider{},
		sessioner: &httper.GorillaSessionProvider{},
		finalizer: finalizer,
	}
	return ret
}

// GetByID invoke *ControllerJSONGen.GetByID using the request body as a json payload.
// GetByID Decodes reqBody as json to invoke *Controller.GetByID.
// Other parameters are passed straight
// GetByID ...
// @route /{id}
// @methods GET
func (t *ControllerHTTPGen) GetByID(w http.ResponseWriter, r *http.Request) {
	var urlID int
	tempurlID, err := strconv.Atoi(t.dataer.Make(w, r).Get("url", "id"))
	if err != nil && t.finalizer.HandleError(err, w, r) {
		return
	}
	urlID = tempurlID

	res, err := t.embed.GetByID(urlID)
	if err != nil && t.finalizer.HandleError(err, w, r) {
		return
	}

	t.finalizer.HandleSuccess(w, res)

}

// UpdateByID invoke *ControllerJSONGen.UpdateByID using the request body as a json payload.
// UpdateByID Decodes reqBody as json to invoke *Controller.UpdateByID.
// Other parameters are passed straight
// UpdateByID ...
// @route /{id}
// @methods PUT,POST
func (t *ControllerHTTPGen) UpdateByID(w http.ResponseWriter, r *http.Request) {
	var urlID int
	tempurlID, err := strconv.Atoi(t.dataer.Make(w, r).Get("url", "id"))
	if err != nil && t.finalizer.HandleError(err, w, r) {
		return
	}
	urlID = tempurlID
	reqBody := r.Body

	res, err := t.embed.UpdateByID(urlID, reqBody)
	if err != nil && t.finalizer.HandleError(err, w, r) {
		return
	}

	t.finalizer.HandleSuccess(w, res)

}

// DeleteByID invoke *ControllerJSONGen.DeleteByID using the request body as a json payload.
// DeleteByID Decodes reqBody as json to invoke *Controller.DeleteByID.
// Other parameters are passed straight
// DeleteByID ...
// @route /{id}
// @methods DELETE
func (t *ControllerHTTPGen) DeleteByID(w http.ResponseWriter, r *http.Request) {
	var REQid int
	tempREQid, err := strconv.Atoi(t.dataer.Make(w, r).Get("req", "id"))
	if err != nil && t.finalizer.HandleError(err, w, r) {
		return
	}
	REQid = tempREQid

	res, err := t.embed.DeleteByID(REQid)
	if err != nil && t.finalizer.HandleError(err, w, r) {
		return
	}

	t.finalizer.HandleSuccess(w, res)

}

// TestVars1 invoke *ControllerJSONGen.TestVars1 using the request body as a json payload.
// TestVars1 Decodes reqBody as json to invoke *Controller.TestVars1.
// Other parameters are passed straight
// TestVars1 ...
func (t *ControllerHTTPGen) TestVars1(w http.ResponseWriter, r *http.Request) {

	res, err := t.embed.TestVars1(w, r)
	if err != nil && t.finalizer.HandleError(err, w, r) {
		return
	}

	t.finalizer.HandleSuccess(w, res)

}

// TestCookier invoke *ControllerJSONGen.TestCookier using the request body as a json payload.
// TestCookier Decodes reqBody as json to invoke *Controller.TestCookier.
// Other parameters are passed straight
// TestCookier ...
func (t *ControllerHTTPGen) TestCookier(w http.ResponseWriter, r *http.Request) {
	var c httper.Cookier
	c = t.cookier.Make(w, r)

	res, err := t.embed.TestCookier(c)
	if err != nil && t.finalizer.HandleError(err, w, r) {
		return
	}

	t.finalizer.HandleSuccess(w, res)

}

// TestSessionner invoke *ControllerJSONGen.TestSessionner using the request body as a json payload.
// TestSessionner Decodes reqBody as json to invoke *Controller.TestSessionner.
// Other parameters are passed straight
// TestSessionner ...
func (t *ControllerHTTPGen) TestSessionner(w http.ResponseWriter, r *http.Request) {
	var s httper.Sessionner
	s = t.sessioner.Make(w, r)

	res, err := t.embed.TestSessionner(s)
	if err != nil && t.finalizer.HandleError(err, w, r) {
		return
	}

	t.finalizer.HandleSuccess(w, res)

}

// TestRPCer invoke *ControllerJSONGen.TestRPCer using the request body as a json payload.
// TestRPCer Decodes r as json to invoke *Controller.TestRPCer.
// TestRPCer ...
func (t *ControllerHTTPGen) TestRPCer(w http.ResponseWriter, r *http.Request) {

	res, err := t.embed.TestRPCer(r)
	if err != nil && t.finalizer.HandleError(err, w, r) {
		return
	}

	t.finalizer.HandleSuccess(w, res)

}
