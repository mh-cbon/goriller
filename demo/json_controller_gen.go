package main

// file generated by
// github.com/mh-cbon/jsoner
// do not edit

import (
	"bytes"
	"encoding/json"
	httper "github.com/mh-cbon/httper/lib"
	"io"
	"net/http"
)

// JSONController is jsoner of *Controller.
// Controller of some resources.
type JSONController struct {
	embed *Controller
}

// NewJSONController constructs a jsoner of *Controller
func NewJSONController(embed *Controller) *JSONController {
	ret := &JSONController{
		embed: embed,
	}
	return ret
}

// HandleSuccess prints http 200 and prints r.
func (t *JSONController) HandleSuccess(w io.Writer, r io.Reader) error {
	if x, ok := w.(http.ResponseWriter); ok {
		x.WriteHeader(http.StatusOK)
		x.Header().Set("Content-Type", "application/json")
	}
	_, err := io.Copy(w, r)
	return err
}

// GetByID Decodes reqBody as json to invoke *Controller.GetByID.
// Other parameters are passed straight
// GetByID ...
// @route /{id}
// @methods GET
func (t *JSONController) GetByID(urlID int) (io.Reader, error) {
	ret := new(bytes.Buffer)
	var retErr error

	retVar0 := t.embed.GetByID(urlID)

	out, encErr := json.Marshal([]interface{}{retVar0})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr
}

// UpdateByID Decodes reqBody as json to invoke *Controller.UpdateByID.
// Other parameters are passed straight
// UpdateByID ...
// @route /{id}
// @methods PUT,POST
func (t *JSONController) UpdateByID(urlID int, reqBody io.Reader) (io.Reader, error) {
	ret := new(bytes.Buffer)
	var retErr error

	var decBody *Tomate
	decErr := json.NewDecoder(reqBody).Decode(decBody)
	if decErr != nil {
		return nil, decErr
	}

	retVar1 := t.embed.UpdateByID(urlID, decBody)

	out, encErr := json.Marshal([]interface{}{retVar1})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr
}

// DeleteByID Decodes reqBody as json to invoke *Controller.DeleteByID.
// Other parameters are passed straight
// DeleteByID ...
// @route /{id}
// @methods DELETE
func (t *JSONController) DeleteByID(REQid int) (io.Reader, error) {
	ret := new(bytes.Buffer)
	var retErr error

	retVar2 := t.embed.DeleteByID(REQid)

	out, encErr := json.Marshal([]interface{}{retVar2})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr
}

// TestVars1 Decodes reqBody as json to invoke *Controller.TestVars1.
// Other parameters are passed straight
// TestVars1 ...
func (t *JSONController) TestVars1(w http.ResponseWriter, r *http.Request) (io.Reader, error) {
	ret := new(bytes.Buffer)
	var retErr error

	t.embed.TestVars1(w, r)

	return ret, retErr
}

// TestCookier Decodes reqBody as json to invoke *Controller.TestCookier.
// Other parameters are passed straight
// TestCookier ...
func (t *JSONController) TestCookier(c httper.Cookier) (io.Reader, error) {
	ret := new(bytes.Buffer)
	var retErr error

	t.embed.TestCookier(c)

	return ret, retErr
}

// TestSessionner Decodes reqBody as json to invoke *Controller.TestSessionner.
// Other parameters are passed straight
// TestSessionner ...
func (t *JSONController) TestSessionner(s httper.Sessionner) (io.Reader, error) {
	ret := new(bytes.Buffer)
	var retErr error

	t.embed.TestSessionner(s)

	return ret, retErr
}

// TestRPCer Decodes r as json to invoke *Controller.TestRPCer.
// TestRPCer ...
func (t *JSONController) TestRPCer(r *http.Request) (io.Reader, error) {

	ret := new(bytes.Buffer)
	var retErr error

	input := struct {
		id int
	}{}
	decErr := json.NewDecoder(r.Body).Decode(&input)
	if decErr != nil {
		return nil, decErr
	}

	retVar3 := t.embed.TestRPCer(input.id)

	out, encErr := json.Marshal([]interface{}{retVar3})
	if encErr != nil {
		retErr = encErr
	} else {
		var b bytes.Buffer
		b.Write(out)
		ret = &b
	}

	return ret, retErr

}
